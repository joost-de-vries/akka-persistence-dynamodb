# This configures the default settings for all DynamoDB Journal plugin
# instances in the system. If you are using just one configuration for
# all persistent actors then you should point your akka.persistence.journal.plugin
# setting to this section.
#
# Otherwise you need to create differently named sections containing
# only those settings that shall be different from the defaults
# configured here, importing the defaults like so:
#
#   my-dynamodb-journal = ${dynamodb-journal}
#   my-dynamodb-journal {
#     <settings...>
#   }
#
dynamodb-journal {

  # The FQCN for the journal plugin implementation - DO NOT CHANGE
  class = "akka.persistence.dynamodb.journal.DynamoDBJournal"
  
  # The service endpoint to connect to for the DynamoDB instance that
  # shall be used. Please refer to the AWS documentation for details.
  endpoint = ""
  
  # The dispatcher that executes the replay logic for this plugin
  # instance - should not normally need to be changed.
  replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"
  
  # The dispatcher that executes the future combinators needed for
  # transforming the AmazonDynamoDBAsyncClient results (i.e.
  # handling the back-off etc.)
  client-dispatcher = "dynamodb-journal.dispatcher"
  
  # The dispatcher that executes the write logic for this plugin
  # instance - should not normally need to be changed.
  plugin-dispatcher = "dynamodb-journal.dispatcher"
  
  # The name of the DynamoDB table to be used for this plugin instance
  journal-table = "akka-persistence"
  
  # The logical journal name, used in the partition keys.
  journal-name = "journal"
  
  # The number of shards to distribute the sequence number items over.
  sequence-shards = 10
  
  # The AWS key ID to use for connecting to the specified endpoint.
  # Will only be used if aws-secret-access-key is also set.
  #
  # It is recommended to leave this (and the aws-secret-access-key) setting
  # empty in order to use the default credentials provider chain, see
  # http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/credentials.html#using-the-default-credential-provider-chain
  aws-access-key-id = ""
  
  # The AWS secret to use in conjuction with the AWS key ID.
  # Will only be used if aws-access-key-id is also set.
  #
  # It is recommended to leave this (and the aws-access-key-id) setting
  # empty in order to use the default credentials provider chain, see
  # http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/credentials.html#using-the-default-credential-provider-chain
  aws-secret-access-key = ""
  
  # number of concurrently running replay prefetch operations for a
  # single PersistentActor; this prefetch means that during a replay
  # more events might be retrieved than specified with the `max`
  # parameter, with corresponding usage DynamoDB read units
  replay-parallelism = 10
  
  # If this is set to `on` then every DynamoDB request will be logged
  # at DEBUG level. Caution: this will generate A LOT of output.
  tracing = off
  
  # Set to `on` to log the detected configuration at INFO level at plugin startup.
  log-config = off
  
  # AWS API limits - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING
  aws-api-limits {
    max-batch-get = 100
    max-batch-write = 25
    max-item-size = 400000
  }
  
  # AWS client configuration settings, see
  # http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/?com/amazonaws/ClientConfiguration.html
  #
  # (setting any of these to the string "default" means that the corresponding
  # setter method on the ClientConfiguration will not be invoked)
  aws-client-config {
    client-execution-timeout = default     # int
    connection-max-idle-millis = default   # long
    connection-timeout = default           # int
    connection-ttl = default               # long
    local-address = default                # InetAddress
    max-connections = default              # int
    max-error-retry = default              # int
    preemptive-basic-proxy-auth = default  # boolean
    protocol = default                     # HTTP or HTTPS
    proxy-domain = default                 # string
    proxy-host = default                   # string
    proxy-password = default               # string
    proxy-port = default                   # int
    proxy-username = default               # string
    proxy-workstation = default            # string
    request-timeout = default              # int
    response-metadata-cache-size = default # int
    signer-override = default              # string
    socket-buffer-size-hints = default     # [ int, int ] (for send & receive)
    socket-timeout = default               # int
    use-expect-continue = default          # boolean
    use-gzip = default                     # boolean
    use-reaper = default                   # boolean
    use-tcp-keepalive = default            # boolean
    user-agent = default                   # string
  }
  
  dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-max = 8
    }
  }

  fixes {
    # Bug akka/akka-persistence-dynamodb#98 can cause an event source which is written successfully
    # and is valid, but where the High Sequence number marker is missing. This causes incomplete
    # replay of the event source. A root cause fix prevents this from occurring, but does not
    # repair existing event sources. Writing new events to incompletely replayed persistent actors
    # will corrupt the event source. If write aligns with an atomic write this will be hidden.
    # This fix cannot recover corrupted event sources, but it attempts to avoid corruption from
    # taking place where this hasn't happened yet. It does so by not fully trusting the high mark.
    # If the last event in a partition is 99, it will attempt to chase the tail of the event
    # source. This guards valid event sources with hidden tails from incomplete replay.
    # For event sources not suffering from this problem there's 1% chance that this leads to a
    # useless query.
    # This is a performance/consistency tradeoff to be made. It should not be required for newly
    # created event sources that have the root cause fix, hence it is off by default.
    # NOTE: With current implementation of the high mark being written after the events,
    # there is a slim chance that a valid event source is written, but a network error occurs 
    # before the high mark is written. In this case the write would be reported as failed to the
    # writing party. Whether you want to "keep the event source" is up for discussion. But this fix
    # would also recover from that situation.
    high-distrust = false
  }
}
dynamodb-snapshot-store {

  class="akka.persistence.dynamodb.snapshot.DynamoDBSnapshotStore"

  # The service endpoint to connect to for the DynamoDB instance that
  # shall be used. Please refer to the AWS documentation for details.
  endpoint = ${dynamodb-journal.endpoint}

  # The dispatcher that executes the future combinators needed for
  # transforming the AmazonDynamoDBAsyncClient results (i.e.
  # handling the back-off etc.)
  client-dispatcher = ${dynamodb-journal.client-dispatcher}

  # The name of the DynamoDB table to be used for this plugin instance
  snapshot-table = "akka-persistence-snapshot"

  # The logical journal name for which we persist snapshots, used in the partition keys.
  journal-name = ${dynamodb-journal.journal-name}

  # The AWS key ID to use for connecting to the specified endpoint.
  # Will only be used if aws-secret-access-key is also set.
  #
  # It is recommended to leave this (and the aws-secret-access-key) setting
  # empty in order to use the default credentials provider chain, see
  # http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/credentials.html#using-the-default-credential-provider-chain
  aws-access-key-id = ${dynamodb-journal.aws-access-key-id}

  # The AWS secret to use in conjuction with the AWS key ID.
  # Will only be used if aws-access-key-id is also set.
  #
  # It is recommended to leave this (and the aws-access-key-id) setting
  # empty in order to use the default credentials provider chain, see
  # http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/credentials.html#using-the-default-credential-provider-chain
  aws-secret-access-key = ${dynamodb-journal.aws-secret-access-key}

  # If this is set to `on` then every DynamoDB request will be logged
  # at DEBUG level. Caution: this will generate A LOT of output.
  tracing = ${dynamodb-journal.tracing}

  aws-client-config =${dynamodb-journal.aws-client-config}

  # AWS API limits - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING
  aws-api-limits {
    max-batch-get = ${dynamodb-journal.aws-api-limits.max-batch-get}
    max-batch-write = ${dynamodb-journal.aws-api-limits.max-batch-write}
    max-item-size = ${dynamodb-journal.aws-api-limits.max-item-size}
  }
}

dynamodb-read-journal = ${dynamodb-journal}
dynamodb-read-journal {

  class = "akka.persistence.dynamodb.query.DynamodbReadJournalProvider"

  # The name of the Global Secondary Index that is used to query currentPersistenceIds
  # see CreatePersistenceIdsIndex.createPersistenceIdsIndexRequest
  persistence-ids-index-name: "persistence-ids-idx"
}
